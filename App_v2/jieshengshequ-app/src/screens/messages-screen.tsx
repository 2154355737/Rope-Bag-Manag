import React, { useState, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Bell, Search, MoreVertical, Check, CheckCheck, Loader2, ExternalLink, Trash2, Settings, AlertTriangle, RefreshCw, Filter, ChevronDown } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { toast } from '@/hooks/use-toast'
import TopNavigation from '@/components/ui/top-navigation'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { 
  getNotifications, 
  markAsRead,
  markAllAsRead,
  getUnreadCount,
  deleteReadNotifications,
  Notification,
  NotificationQuery
} from '@/api/notifications'

// ÈÄöÁü•Á±ªÂûãÈÖçÁΩÆ - Âü∫‰∫éÂêéÁ´ØÂÆûÈôÖ‰ΩøÁî®ÁöÑÁ±ªÂûã
const NOTIFICATION_TYPES = [
  { value: 'all', label: 'ÂÖ®ÈÉ®ÈÄöÁü•', icon: 'üì¢' },
  { value: 'ResourceApproved', label: 'ËµÑÊ∫êÂÆ°Ê†∏', icon: '‚úÖ' },
  { value: 'CommentReceived', label: 'ËØÑËÆ∫ÂõûÂ§ç', icon: 'üí¨' },
  { value: 'PostFlagChanged', label: 'Â∏ñÂ≠êÁä∂ÊÄÅ', icon: 'üìù' },
  { value: 'CategoryUpdate', label: 'ÂàÜÁ±ªÊõ¥Êñ∞', icon: 'üè∑Ô∏è' },
  { value: 'unknown', label: 'ÂÖ¨ÂëäÈÄöÁü•', icon: 'üì¢' },
]

const MessagesScreen: React.FC = () => {
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [loading, setLoading] = useState(true)
  const [refreshing, setRefreshing] = useState(false)
  const [loadingMore, setLoadingMore] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [unreadCount, setUnreadCount] = useState(0)
  const [bulkActionLoading, setBulkActionLoading] = useState(false)
  const [showClearDialog, setShowClearDialog] = useState(false)
  const [selectedType, setSelectedType] = useState('all')
  const [currentPage, setCurrentPage] = useState(1)
  const [hasMore, setHasMore] = useState(true)
  const [selectedNotifications, setSelectedNotifications] = useState<Set<number>>(new Set())
  const [isSelectionMode, setIsSelectionMode] = useState(false)

  // Âä†ËΩΩÈÄöÁü•ÂàóË°®
  useEffect(() => {
    loadNotifications(true)
    loadUnreadCount()
  }, [])

  const loadNotifications = async (reset = false, showLoading = true) => {
    try {
      if (showLoading) setLoading(true)
      const page = reset ? 1 : currentPage
      const params: NotificationQuery = { 
        page, 
        size: 20
      }
      
      const data = await getNotifications(params)
      const newNotifications = data.list || []
      
      if (reset) {
        setNotifications(newNotifications)
        setCurrentPage(1)
      } else {
        setNotifications(prev => [...prev, ...newNotifications])
      }
      
      setHasMore(newNotifications.length === 20)
      if (!reset) setCurrentPage(prev => prev + 1)
    } catch (error: any) {
      console.error('Failed to load notifications:', error)
      if (error.message !== 'Êú™ÊéàÊùÉÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï') {
        toast({
          title: "Âä†ËΩΩÂ§±Ë¥•",
          description: "Êó†Ê≥ïÂä†ËΩΩÈÄöÁü•ÂàóË°®",
          variant: "destructive"
        })
      }
    } finally {
      if (showLoading) setLoading(false)
    }
  }

  const loadUnreadCount = async () => {
    try {
      const data = await getUnreadCount()
      setUnreadCount(data.count || 0)
    } catch (error) {
      console.error('Failed to load unread count:', error)
    }
  }

  // ‰∏ãÊãâÂà∑Êñ∞
  const handleRefresh = async () => {
    setRefreshing(true)
    await Promise.all([
      loadNotifications(true, false),
      loadUnreadCount()
    ])
    setRefreshing(false)
    toast({
      title: "Âà∑Êñ∞ÂÆåÊàê",
      description: "ÈÄöÁü•ÂàóË°®Â∑≤Êõ¥Êñ∞",
    })
  }

  // Âä†ËΩΩÊõ¥Â§ö
  const handleLoadMore = async () => {
    if (loadingMore || !hasMore) return
    setLoadingMore(true)
    await loadNotifications(false, false)
    setLoadingMore(false)
  }

  // Ê†áËÆ∞Âçï‰∏™ÈÄöÁü•‰∏∫Â∑≤ËØª
  const handleMarkAsRead = async (id: number) => {
    try {
      await markAsRead(id)
      setNotifications(prev => 
        prev.map(notification => 
          notification.id === id 
            ? { ...notification, is_read: true }
            : notification
        )
      )
      setUnreadCount(prev => Math.max(0, prev - 1))
    } catch (error: any) {
      console.error('Mark as read failed:', error)
      toast({
        title: "Êìç‰ΩúÂ§±Ë¥•",
        description: error.message || "Ê†áËÆ∞Â∑≤ËØªÂ§±Ë¥•",
        variant: "destructive"
      })
    }
  }

  // Ê†áËÆ∞ÊâÄÊúâÈÄöÁü•‰∏∫Â∑≤ËØª
  const handleMarkAllAsRead = async () => {
    if (unreadCount === 0) {
      toast({
        title: "ÊèêÁ§∫",
        description: "Ê≤°ÊúâÊú™ËØªÈÄöÁü•",
      })
      return
    }

    try {
      setBulkActionLoading(true)
      await markAllAsRead()
      setNotifications(prev => 
        prev.map(notification => ({ ...notification, is_read: true }))
      )
      setUnreadCount(0)
      
      toast({
        title: "ÂÖ®ÈÉ®Â∑≤ËØª",
        description: "ÊâÄÊúâÈÄöÁü•Â∑≤Ê†áËÆ∞‰∏∫Â∑≤ËØª",
      })
    } catch (error: any) {
      console.error('Mark all as read failed:', error)
      toast({
        title: "Êìç‰ΩúÂ§±Ë¥•",
        description: error.message || "Ê†áËÆ∞ÂÖ®ÈÉ®Â∑≤ËØªÂ§±Ë¥•",
        variant: "destructive"
      })
    } finally {
      setBulkActionLoading(false)
    }
  }

  // Ê∏ÖÁêÜÂ∑≤ËØªÈÄöÁü•
  const handleClearRead = async () => {
    try {
      setBulkActionLoading(true)
      const result = await deleteReadNotifications()
      
      // ‰ªéÂâçÁ´ØÁä∂ÊÄÅ‰∏≠ÁßªÈô§Â∑≤ËØªÈÄöÁü•
      setNotifications(prev => prev.filter(n => !n.is_read))
      
      toast({
        title: "Ê∏ÖÁêÜÂÆåÊàê",
        description: `Â∑≤Ê∏ÖÁêÜ ${result.deleted_count} Êù°Â∑≤ËØªÈÄöÁü•`,
      })
    } catch (error: any) {
      console.error('Clear read failed:', error)
      toast({
        title: "Êìç‰ΩúÂ§±Ë¥•",
        description: error.message || "Ê∏ÖÁêÜÂ§±Ë¥•",
        variant: "destructive"
      })
    } finally {
      setBulkActionLoading(false)
      setShowClearDialog(false)
    }
  }

  // ÊâπÈáèÈÄâÊã©Áõ∏ÂÖ≥
  const toggleSelection = (id: number) => {
    const newSelected = new Set(selectedNotifications)
    if (newSelected.has(id)) {
      newSelected.delete(id)
    } else {
      newSelected.add(id)
    }
    setSelectedNotifications(newSelected)
  }

  const selectAll = () => {
    const visibleIds = filteredNotifications.map(n => n.id)
    setSelectedNotifications(new Set(visibleIds))
  }

  const clearSelection = () => {
    setSelectedNotifications(new Set())
    setIsSelectionMode(false)
  }

  // ÊâπÈáèÊìç‰ΩúÈÄâ‰∏≠ÁöÑÈÄöÁü•
  const handleBulkMarkAsRead = async () => {
    const selectedIds = Array.from(selectedNotifications)
    const unreadSelected = selectedIds.filter(id => {
      const notification = notifications.find(n => n.id === id)
      return notification && !notification.is_read
    })

    if (unreadSelected.length === 0) {
      toast({
        title: "ÊèêÁ§∫",
        description: "ÊâÄÈÄâÈÄöÁü•ÈÉΩÂ∑≤ÊòØÂ∑≤ËØªÁä∂ÊÄÅ",
      })
      return
    }

    try {
      setBulkActionLoading(true)
      // ËøôÈáåÈúÄË¶ÅÊâπÈáèÊ†áËÆ∞APIÔºåÊöÇÊó∂ÈÄê‰∏™Ë∞ÉÁî®
      await Promise.all(unreadSelected.map(id => markAsRead(id)))
      
      setNotifications(prev => 
        prev.map(notification => 
          selectedIds.includes(notification.id) 
            ? { ...notification, is_read: true }
            : notification
        )
      )
      
      setUnreadCount(prev => Math.max(0, prev - unreadSelected.length))
      clearSelection()
      
      toast({
        title: "ÊâπÈáèÊìç‰ΩúÂÆåÊàê",
        description: `Â∑≤Ê†áËÆ∞ ${unreadSelected.length} Êù°ÈÄöÁü•‰∏∫Â∑≤ËØª`,
      })
    } catch (error: any) {
      console.error('Bulk mark as read failed:', error)
      toast({
        title: "Êìç‰ΩúÂ§±Ë¥•",
        description: error.message || "ÊâπÈáèÊ†áËÆ∞Â§±Ë¥•",
        variant: "destructive"
      })
    } finally {
      setBulkActionLoading(false)
    }
  }

  // Ê£ÄÊü•ÊòØÂê¶ÊúâÂ∑≤ËØªÈÄöÁü•ÂèØÊ∏ÖÁêÜ
  const readNotificationsCount = notifications.filter(n => n.is_read).length

  // Ê†ºÂºèÂåñÊó∂Èó¥
  const formatTime = (timeStr: string) => {
    const time = new Date(timeStr)
    const now = new Date()
    const diffInMs = now.getTime() - time.getTime()
    const diffInMinutes = Math.floor(diffInMs / (1000 * 60))
    const diffInHours = Math.floor(diffInMinutes / 60)
    const diffInDays = Math.floor(diffInHours / 24)

    if (diffInMinutes < 1) return 'ÂàöÂàö'
    if (diffInMinutes < 60) return `${diffInMinutes}ÂàÜÈíüÂâç`
    if (diffInHours < 24) return `${diffInHours}Â∞èÊó∂Ââç`
    if (diffInDays === 1) return 'Êò®Â§©'
    if (diffInDays < 7) return `${diffInDays}Â§©Ââç`
    
    return time.toLocaleDateString()
  }

  // ËøáÊª§ÈÄöÁü•ÔºàÂâçÁ´ØÁ≠õÈÄâÔºâ
  const filteredNotifications = notifications.filter(notification => {
    // Á±ªÂûãÁ≠õÈÄâ
    let typeMatch = false
    if (selectedType === 'all') {
      typeMatch = true
    } else if (selectedType === 'unknown') {
      // "ÂÖ¨ÂëäÈÄöÁü•" ÂåπÈÖçÊâÄÊúâÊú™Áü•Á±ªÂûãÊàñÁ©∫Á±ªÂûãÔºàÈÄöÂ∏∏ÊòØÁ≥ªÁªüÂÖ¨ÂëäÔºâ
      typeMatch = !notification.notif_type || !NOTIFICATION_TYPES.some(t => t.value === notification.notif_type && t.value !== 'all' && t.value !== 'unknown')
    } else {
      typeMatch = notification.notif_type === selectedType
    }
    
    // ÊêúÁ¥¢Á≠õÈÄâ
    const searchMatch = !searchQuery || 
      notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      notification.content.toLowerCase().includes(searchQuery.toLowerCase())
    
    return typeMatch && searchMatch
  })

  // Ëé∑ÂèñÂÆûÈôÖÂ≠òÂú®ÁöÑÈÄöÁü•Á±ªÂûã
  const actualTypes = React.useMemo(() => {
    if (notifications.length === 0) return []
    const uniqueTypes = [...new Set(notifications.map(n => n.notif_type).filter(Boolean))]
    return uniqueTypes
  }, [notifications])

  // Ë∞ÉËØï‰ø°ÊÅØÔºöÊòæÁ§∫ÂÆûÈôÖÁöÑÈÄöÁü•Á±ªÂûã
  React.useEffect(() => {
    if (notifications.length > 0) {
      console.log('ÂÆûÈôÖÈÄöÁü•Á±ªÂûã:', actualTypes)
      console.log('ÂΩìÂâçÁ≠õÈÄâÁ±ªÂûã:', selectedType)
      console.log('Á≠õÈÄâÂêéÊï∞Èáè:', filteredNotifications.length)
    }
  }, [actualTypes, selectedType, filteredNotifications.length])

  // Ëé∑ÂèñÈÄöÁü•Á±ªÂûãÂõæÊ†á
  const getNotificationIcon = (type?: string) => {
    if (!type) return 'üì¢' // Êú™Áü•Á±ªÂûã‰ΩøÁî®ÂÖ¨ÂëäÂõæÊ†áÔºàÈÄöÂ∏∏ÊòØÁ≥ªÁªüÂÖ¨ÂëäÔºâ
    const typeConfig = NOTIFICATION_TYPES.find(t => t.value === type)
    return typeConfig?.icon || 'üì¢' // Êú™ÂåπÈÖçÁöÑÁ±ªÂûã‰πü‰ΩøÁî®ÂÖ¨ÂëäÂõæÊ†á
  }

  // Â§ÑÁêÜÈÄöÁü•ÁÇπÂáª
  const handleNotificationClick = (notification: Notification) => {
    const navigate = useNavigate()
    
    if (isSelectionMode) {
      toggleSelection(notification.id)
      return
    }

    // Â¶ÇÊûúÊú™ËØªÔºåÊ†áËÆ∞‰∏∫Â∑≤ËØª
    if (!notification.is_read) {
      handleMarkAsRead(notification.id)
    }
    
    // Â¶ÇÊûúÊúâÈìæÊé•ÔºåË∑≥ËΩ¨
    if (notification.link) {
      // Ëß£ÊûêÈìæÊé•Âπ∂Ë∑≥ËΩ¨Âà∞Áõ∏Â∫îÈ°µÈù¢
      try {
        const url = new URL(notification.link, window.location.origin)
        const pathname = url.pathname
        
        // ÂÜÖÈÉ®Ë∑ØÁî±Ë∑≥ËΩ¨
        if (pathname.startsWith('/')) {
          navigate(pathname)
        } else {
          // Â§ñÈÉ®ÈìæÊé•
          window.open(notification.link, '_blank')
        }
      } catch (error) {
        console.error('Invalid link:', notification.link)
        // Â¶ÇÊûúÈìæÊé•Ê†ºÂºè‰∏çÊ≠£Á°ÆÔºåÂ∞ùËØï‰Ωú‰∏∫ÂÜÖÈÉ®Ë∑ØÁî±Â§ÑÁêÜ
        if (notification.link.startsWith('/')) {
          navigate(notification.link)
        }
      }
    }
  }

  return (
    <div className="flex flex-col h-full bg-background">
      {/* È°∂ÈÉ®ÂØºËà™Ê†è */}
      <TopNavigation
        title="ÈÄöÁü•"
        subtitle={loading ? "Âä†ËΩΩ‰∏≠..." : `${notifications.length} Êù°ÈÄöÁü•${unreadCount > 0 ? `Ôºå${unreadCount} Êù°Êú™ËØª` : ''}`}
        showSearchButton
        rightAction={
          <div className="flex items-center space-x-2">
            {/* Âà∑Êñ∞ÊåâÈíÆ */}
            <Button 
              variant="ghost" 
              size="icon" 
              className="h-9 w-9"
              onClick={handleRefresh}
              disabled={refreshing}
            >
              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
            </Button>

            {/* ÈÄâÊã©Ê®°ÂºèÂàáÊç¢ */}
            {notifications.length > 0 && (
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-9 w-9"
                onClick={() => setIsSelectionMode(!isSelectionMode)}
              >
                <Check className={`h-4 w-4 ${isSelectionMode ? 'text-primary' : ''}`} />
              </Button>
            )}

            {/* Êõ¥Â§öÊìç‰ΩúËèúÂçï */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="h-9 w-9"
                  disabled={bulkActionLoading}
                >
                  {bulkActionLoading ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <MoreVertical size={20} />
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" sideOffset={20} className="w-48 z-[80]">
                <DropdownMenuItem 
                  onClick={handleMarkAllAsRead}
                  disabled={unreadCount === 0 || bulkActionLoading}
                  className="flex items-center"
                >
                  <CheckCheck className="mr-2 h-4 w-4" />
                  ‰∏ÄÈîÆÂ∑≤ËØª {unreadCount > 0 && `(${unreadCount})`}
                </DropdownMenuItem>
                <DropdownMenuItem 
                  onClick={() => setShowClearDialog(true)}
                  disabled={readNotificationsCount === 0 || bulkActionLoading}
                  className="flex items-center"
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Ê∏ÖÁêÜÂ∑≤ËØª {readNotificationsCount > 0 && `(${readNotificationsCount})`}
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  className="flex items-center"
                  onClick={() => toast({ title: "ÈÄöÁü•ËÆæÁΩÆ", description: "ÂäüËÉΩÂºÄÂèë‰∏≠..." })}
                >
                  <Settings className="mr-2 h-4 w-4" />
                  ÈÄöÁü•ËÆæÁΩÆ
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        }
      />

      {/* ÂÜÖÂÆπÂå∫Âüü - ‰∏∫Âõ∫ÂÆöÂØºËà™Ê†èÁïôÂá∫Á©∫Èó¥ */}
      <div className="pt-nav"> {/* Âõ∫ÂÆöÂØºËà™Ê†èÈ´òÂ∫¶ + ÂÆâÂÖ®Âå∫Âüü */}
        {/* Á≠õÈÄâÂíåÊêúÁ¥¢Ê†è */}
        <div className="px-4 py-3 space-y-3">
          {/* ÈÄöÁü•Á±ªÂûãÁ≠õÈÄâ */}
          <div className="flex items-center space-x-3">
            <Select value={selectedType} onValueChange={setSelectedType}>
              <SelectTrigger className="w-40 h-9">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {NOTIFICATION_TYPES.map((type) => {
                  // ËÆ°ÁÆóËØ•Á±ªÂûãÁöÑÈÄöÁü•Êï∞Èáè
                  let count = 0
                  if (type.value === 'all') {
                    count = notifications.length
                  } else if (type.value === 'unknown') {
                    count = notifications.filter(n => !n.notif_type || !NOTIFICATION_TYPES.some(t => t.value === n.notif_type && t.value !== 'all' && t.value !== 'unknown')).length
                  } else {
                    count = notifications.filter(n => n.notif_type === type.value).length
                  }

                  // Â¶ÇÊûú‰∏çÊòØ"ÂÖ®ÈÉ®ÈÄöÁü•"‰∏îÊï∞Èáè‰∏∫0ÔºåÂàô‰∏çÊòæÁ§∫ËØ•ÈÄâÈ°π
                  if (type.value !== 'all' && count === 0) {
                    return null
                  }

                  return (
                    <SelectItem key={type.value} value={type.value}>
                      <div className="flex items-center justify-between w-full">
                        <div className="flex items-center space-x-2">
                          <span>{type.icon}</span>
                          <span>{type.label}</span>
                        </div>
                        <span className="text-xs text-muted-foreground ml-2">
                          ({count})
                        </span>
                      </div>
                    </SelectItem>
                  )
                })}
              </SelectContent>
            </Select>
            
            {selectedType !== 'all' && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setSelectedType('all')}
                className="h-9"
              >
                Ê∏ÖÈô§Á≠õÈÄâ
              </Button>
            )}
            

          </div>

          {/* ÊêúÁ¥¢Ê°Ü */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
              id="notifications-search"
              name="notificationSearch"
              placeholder="ÊêúÁ¥¢ÈÄöÁü•..."
              className="pl-10 h-9"
            autoComplete="search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>

          {/* ÊâπÈáèÈÄâÊã©Â∑•ÂÖ∑Ê†è */}
          <AnimatePresence>
            {isSelectionMode && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="flex items-center justify-between p-3 bg-muted/30 rounded-lg"
              >
                <div className="flex items-center space-x-3">
                  <span className="text-sm text-muted-foreground">
                    Â∑≤ÈÄâÊã© {selectedNotifications.size} È°π
                  </span>
                  <Button size="sm" variant="outline" onClick={selectAll}>
                    ÂÖ®ÈÄâ
                  </Button>
                  <Button size="sm" variant="outline" onClick={clearSelection}>
                    ÂèñÊ∂à
                  </Button>
                </div>
                
                {selectedNotifications.size > 0 && (
                  <div className="flex items-center space-x-2">
                    <Button size="sm" onClick={handleBulkMarkAsRead} disabled={bulkActionLoading}>
                      <Check className="mr-1 h-3 w-3" />
                      Ê†áËÆ∞Â∑≤ËØª
                    </Button>
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Âä†ËΩΩÁä∂ÊÄÅ */}
        {loading && (
          <div className="flex items-center justify-center py-8">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">Âä†ËΩΩÈÄöÁü•‰∏≠...</span>
          </div>
        )}

        {/* ÈÄöÁü•ÂàóË°® */}
        {!loading && (
          <div className="flex-1 overflow-y-auto pb-4">
            <div className="space-y-2 px-4">
              {filteredNotifications.map((notification) => (
                <motion.div
                  key={notification.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  onClick={() => handleNotificationClick(notification)}
                >
                  <Card className={`cursor-pointer transition-all duration-200 border-l-4 hover:shadow-md ${
                    notification.is_read 
                      ? 'border-l-muted hover:bg-muted/20' 
                      : 'border-l-primary bg-primary/5 hover:bg-primary/10 shadow-sm'
                  } ${
                    selectedNotifications.has(notification.id) ? 'ring-2 ring-primary bg-primary/10' : ''
                  }`}>
                    <CardContent className="p-3">
                      <div className="flex items-start space-x-3">
                        {/* ÈÄâÊã©Ê°ÜÔºàÈÄâÊã©Ê®°Âºè‰∏ãÔºâ */}
                        {isSelectionMode && (
                          <div className="flex-shrink-0 mt-0.5">
                            <div className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                              selectedNotifications.has(notification.id)
                                ? 'bg-primary border-primary'
                                : 'border-muted-foreground'
                            }`}>
                              {selectedNotifications.has(notification.id) && (
                                <Check className="w-3 h-3 text-primary-foreground" />
                              )}
                            </div>
                          </div>
                        )}

                        {/* ÈÄöÁü•ÂõæÊ†á */}
                        <div className="flex-shrink-0 text-lg mt-0.5">
                          {getNotificationIcon(notification.notif_type)}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-start justify-between mb-1">
                            <h3 className={`font-medium text-sm leading-tight ${
                              notification.is_read ? 'text-muted-foreground' : 'text-foreground'
                            }`}>
                              {notification.title}
                            </h3>
                            <div className="flex items-center space-x-2 ml-2 flex-shrink-0">
                              <span className="text-xs text-muted-foreground whitespace-nowrap">
                                {formatTime(notification.created_at)}
                              </span>
                              {!notification.is_read && (
                                <div className="w-2 h-2 bg-primary rounded-full"></div>
                              )}
                            </div>
                          </div>
                          
                          <p className={`text-sm mb-2 leading-relaxed ${
                            notification.is_read ? 'text-muted-foreground' : 'text-foreground/80'
                          }`}>
                            {notification.content}
                          </p>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              {notification.notif_type && (
                                <Badge variant="outline" className="text-xs px-2 py-0.5">
                                  {NOTIFICATION_TYPES.find(t => t.value === notification.notif_type)?.label || notification.notif_type}
                                </Badge>
                              )}
                              {notification.link && (
                                <ExternalLink size={12} className="text-muted-foreground" />
                              )}
      </div>

                            {!isSelectionMode && !notification.is_read && (
                              <Button
                                variant="ghost"
                                size="sm"
                                className="h-6 px-2 text-xs hover:bg-primary/20"
        onClick={(e) => {
                                  e.stopPropagation()
                                  handleMarkAsRead(notification.id)
                                }}
                              >
                                <Check size={12} className="mr-1" />
                                Â∑≤ËØª
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}

              {/* Âä†ËΩΩÊõ¥Â§öÊåâÈíÆ */}
              {!loading && hasMore && notifications.length > 0 && (
                <div className="flex justify-center py-4">
                  <Button 
                    variant="outline" 
                    onClick={handleLoadMore}
                    disabled={loadingMore}
                    className="w-full max-w-xs"
                  >
                    {loadingMore ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Âä†ËΩΩ‰∏≠...
                      </>
                    ) : (
                      <>
                        <ChevronDown className="mr-2 h-4 w-4" />
                        Âä†ËΩΩÊõ¥Â§ö
                      </>
                    )}
                  </Button>
                </div>
              )}
            </div>
      </div>
        )}

      {/* Á©∫Áä∂ÊÄÅ */}
        {!loading && filteredNotifications.length === 0 && (
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
              <Bell className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-medium mb-2">
                {searchQuery || selectedType !== 'all' ? 'Êú™ÊâæÂà∞Áõ∏ÂÖ≥ÈÄöÁü•' : notifications.length === 0 ? 'ÊöÇÊó†ÈÄöÁü•' : 'Ê≤°ÊúâÂåπÈÖçÁöÑÈÄöÁü•'}
              </h3>
              <p className="text-muted-foreground">
                {searchQuery || selectedType !== 'all'
                  ? 'Â∞ùËØïË∞ÉÊï¥Á≠õÈÄâÊù°‰ª∂ÊàñÊêúÁ¥¢ÂÖ≥ÈîÆËØç' 
                  : notifications.length === 0 
                    ? 'ÂΩìÊúâÊñ∞ÁöÑÈÄöÁü•Êó∂Ôºå‰ºöÂú®ËøôÈáåÊòæÁ§∫' 
                    : 'Â∞ùËØïË∞ÉÊï¥ÊêúÁ¥¢Êù°‰ª∂'
                }
              </p>
            </div>
        </div>
      )}
      </div> {/* ÁªìÊùüÂÜÖÂÆπÂå∫Âüü */}

      {/* Ê∏ÖÁêÜÂ∑≤ËØªÈÄöÁü•Á°ÆËÆ§ÂØπËØùÊ°Ü */}
      <AlertDialog open={showClearDialog} onOpenChange={setShowClearDialog}>
        <AlertDialogContent className="mx-4 rounded-2xl max-w-md">
          <AlertDialogHeader className="pb-4">
            <AlertDialogTitle className="flex items-center text-lg">
              <AlertTriangle className="mr-2 h-5 w-5 text-orange-500" />
              Á°ÆËÆ§Ê∏ÖÁêÜÂ∑≤ËØªÈÄöÁü•
            </AlertDialogTitle>
            <AlertDialogDescription className="text-sm leading-relaxed pt-2">
              ÊÇ®Âç≥Â∞ÜÊ∞∏‰πÖÊ∏ÖÁêÜ <span className="font-medium text-foreground">{readNotificationsCount}</span> Êù°Â∑≤ËØªÈÄöÁü•„ÄÇ
              <br /><br />
              <span className="text-orange-600 font-medium">Ê≥®ÊÑèÔºöÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄÔºåÊ∏ÖÁêÜÂêéÁöÑÈÄöÁü•Â∞ÜÊó†Ê≥ïÊÅ¢Â§ç„ÄÇ</span>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="pt-4 gap-3">
            <AlertDialogCancel className="rounded-xl">ÂèñÊ∂à</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleClearRead}
              disabled={bulkActionLoading}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90 rounded-xl"
            >
              {bulkActionLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Ê∏ÖÁêÜ‰∏≠...
                </>
              ) : (
                <>
                  <Trash2 className="mr-2 h-4 w-4" />
                  Á°ÆËÆ§Ê∏ÖÁêÜ
                </>
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}

export default MessagesScreen 